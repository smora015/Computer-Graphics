// Name: Sergio Morales
// Quarter, Year: Fall 2014
// Lab: 2
//
// This file is to be modified by the student.
// main.cpp
////////////////////////////////////////////////////////////

#include <GL/glut.h>
#include <iostream>
#include <vector>
#include <math.h>
#include "point2d.h"

using namespace std;

const int WINDOW_WIDTH = 800;
const int WINDOW_HEIGHT = 800;

#define doX 0
#define doY 1

// Global vars used for constructing Bezier curves
vector< Point2D > points;

// ################ //
// Helper Functions //
// ################ //

Point2D max( int x_y )
{
    int max = 0;
    
    for(int i = 0; i < 3; ++i)
    {
        if( ((x_y == doX) ? points[i].x   : points[i].y) >= 
            ((x_y == doX) ? points[max].x : points[max].y ))
            max = i;
    }
    
    cout << "Found " << ((x_y == doX) ? "x_max" : "y_max") << " to be " << max << endl;
    return points[max];
}

Point2D min( int x_y )
{
    int min = 0;
    
    for(int i = 0; i < 3; ++i)
    {
        if( ((x_y == doX) ? points[i].x   : points[i].y) <=
            ((x_y == doX) ? points[min].x : points[min].y ))
            min = i;
    }
    
    cout << "Found " << ((x_y == doX) ? "x_min" : "y_min") << " to be " << min << endl;
    return points[min];
}

// ############################################# //
// ########## Function Declarations ############ //
// ############################################# //
// Renders a quad at cell (x, y) with dimensions CELL_LENGTH
void renderPixel(int x, int y, float r, float g, float b);

// Renders line based on incremental DDA
void renderLine( int x0, int y0, int x1, int y1);

// Renders a triangular polygon
void renderTPolygon();

// Returns appropriate window coordinates
Point2D GLScreenToWindowCoordinates( const Point2D & p );

// Output functon to OpenGL Buffer
void GL_render();

// Mouse even handler
void GL_mouse(int button, int state, int x, int y);

//Initializes OpenGL attributes
void GLInit(int* argc, char** argv);



int main( int argc, char** argv )
{
  GLInit(&argc, argv);
  glutMainLoop();
}


// ############################################# //
// ########## Function Definitions ############# //
// ############################################# //
void GLInit(int* argc, char** argv)
{
  glutInit(argc, argv);
  glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE);
  glutInitWindowSize(WINDOW_WIDTH, WINDOW_HEIGHT);

  // Create window
  glutCreateWindow("CS 130 - Lab 2 <Sergio Morales>");

  // Register rendering function
  glutDisplayFunc( GL_render );
	
  // NEW: Register mouse event function
  glutMouseFunc( GL_mouse );


  // The default view coordinates is (-1.0, -1.0) bottom left & (1.0, 1.0) top right.
  // For the purposes of this lab, this is set to the number of pixels
  // in each dimension.
  glMatrixMode(GL_PROJECTION_MATRIX);
  glOrtho(0, WINDOW_WIDTH, 0, WINDOW_HEIGHT, -1, 1);
}

void GL_render()
{
  glClear( GL_COLOR_BUFFER_BIT );

  // Render Bezier curve after 2 mouse clicks on screen
  if( points.size() == 3 )
  {
      for(int i = 0; i < points.size(); ++i)
        cout << "P" << i << ": " << points[i].x << " " << points[i].y << endl;
      renderTPolygon(); // Render triangle polygon
      points.clear();   // Clear points vector after rendering
      
  }
  glutSwapBuffers();
}

void renderTPolygon()
{
    // Find min and max values for polygon points
    Point2D y_min = min( doY );
    Point2D y_max = max( doY );
    Point2D x_min = min( doX );
    Point2D x_max = max( doX );
 
 	Point2D mid;
    if( (points[0].y == points[1].y) || (points[0].y == points[2].y) )
    {
    
    
    }
    
    
    if( y_min.y == y_max.y )
    {
        cout << "Not a real triangle!" << endl;
        return;
    }
    int dy = (int) (y_max.y - y_min.y);
    int dx = (int) (x_max.x - x_min.x);
        
    int x_begin = 0, x_end = 0; // Positions for scanline to start and finish
    // Render oen scan line at a time
    for( int y = (int)y_min.y; (dy > 0) ? (y <= (int)y_max.y) : (y >= (int) y_max.y); y += (dy > 0) ? 1 : -1 )
    {
        //cout << y << endl;
        for( int x = (int)x_min.x; (dx > 0) ? (x <= (int)x_max.x) : (x >= (int) x_max.x) ; x += (dx > 0) ? 1 : -1  )
        {
            //cout << x << " ";
            x_begin = x;
            x_end = (int)x_max.x;
            //renderLine( x_begin, y, x_end, y );
            renderPixel( x, y, .2, 1.0, .4 );
        }
        //cout << endl;
    }
    
    renderLine( (int) x_min.x, (int) x_min.y, (int) x_max.x, (int) x_max.y );
    renderLine( (int) x_min.x, (int) x_min.y, (int) y_max.x, (int) y_max.y );
    renderLine( (int) x_max.x, (int) x_max.y, (int) y_max.x, (int) y_max.y );

}

void GL_mouse(int button, int state, int x, int y)
{
  // Right click clears the screen and the vector of points
  if( button == GLUT_RIGHT_BUTTON && state == GLUT_UP )
  {
    points.clear();
    glutPostRedisplay();
  }

  // Left click gets points
  if( button == GLUT_LEFT_BUTTON && state == GLUT_UP )
  {
    // Get first/second coordinate
    Point2D temp = GLScreenToWindowCoordinates( Point2D(x, y) );
    points.push_back( temp );

    // After second click, form Bezier curve
    if( points.size() == 3 )
      glutPostRedisplay();
  }
  
  return;
} 

void renderPixel(int x, int y, float r, float g, float b)
{
  // Set glBegin flags
  glBegin( GL_POINTS );

  // Change color to RGB parameter
  glColor3f( r, g, b );

  // Render a point based off a vertex
  glVertex2f( x, y);

  // Signal finish rendering
  glEnd();
}

void renderLine( int x0, int y0, int x1, int y1)
{
  // Swap endpoints to make rendering go from left -> right
  if( x0 > x1 )
  {
    int temp = x0;
  	x0 = x1;
  	x1 = temp;
  	
  	temp = y0;
  	y0 = y1;
  	y1 = temp;
  }
  

  // Declare variables
  float dy = (y1 - y0); // Change in y
  float dx = (x1 - x0); // Change in x
  float m = 0;

  // Find slope
  if( dx != 0 )
      m = dy / dx;

  float x = x0, y = y0; // Set initial x and y positions
 
  if( m > 1 ) // Case 1: Slope > 1 (steep lines)
  {
    while( abs( (int) y) != abs( (int)y1))
    {
      renderPixel(  (int) round( x ),  (int) y, 1, 1, 1 );
      x +=  1/m; // Since the slope is greater than 1, we move x at a rate of 1/slope
      y += (dy < 0) ? -1 : 1; // Increment or decrement y based on direction      
    }
  }
  else if( m < -1 ) // Case 2: Slope < -1 (steep lines)
  {
    while( abs( (int) y) != abs( (int) y1))
    {
      renderPixel(  (int) round( x ),  (int) y, 1, 1, 1 );
      x -=  1/m; // Since the slope is less than 1, we move x at a rate of -1/slope
      y += (dy < 0) ? -1 : 1; // Increment or decrement y based on direction
    }
  }
  else if ( m == 0 ) // Case 3: Slope is 0. Horizontal or Vertical lines
  {
    while( abs( (int) x) != abs( (int) x1) || abs( (int) y) != abs( (int)y1) )
    {
      renderPixel(  (int) round( x ),  (int) round( y ), 1, 1, 1);
      if( y != y1 )
		y += (dy < 0) ? -1 : 1;
      if( x != x1 )
		x += (dx < 0) ? -1 : 1;
    }
  }
  else if( m > -1 && m <= 1) // Case 4:  -1 < Slope <= 1. Normal diagonal lines
  {
    while( abs( (int) x) != abs( (int) x1) )
    {
      renderPixel(  (int) x,  (int) round( y ), 1, 1, 1 );
      y += m;

      x += (dx < 0) ? -1 : 1;
    }
  }
}

Point2D GLScreenToWindowCoordinates( const Point2D & p )
{
  GLdouble model[16];
  glGetDoublev( GL_MODELVIEW_MATRIX, model );

  GLdouble projection[16];
  glGetDoublev( GL_PROJECTION_MATRIX, projection );
	
  GLint viewport[4];
  glGetIntegerv( GL_VIEWPORT, viewport );
	
  Point2D converted;
  GLdouble temp;
	
  gluUnProject( p.x, viewport[3] - p.y, 0, model, projection, viewport, &converted.x, &converted.y, &temp );
	
  return converted;
}
